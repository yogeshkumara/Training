
docker network create -d bridge br2
docker network ls
docker network inspect br2

docker network create --driver=bridge --subnet=172.28.0.0/16 --ip-range=172.28.5.0/24 --gateway=172.28.5.254 br3

docker network inspect br3

docker run -itd --name cont2 --net=br3 httpd
docker inspect httpd

docker swarm:
master system:s1
docker swarm init --advertise-addr=172.31.47.252
worker system:s2
docker swarm join --token SWMTKN-1-5g90q48weqrtqryq4kj6ow0e8xm9wmv9o6vgqc5j320ymybd5c-8ex8j0bc40s6hgvy5ui5gl4gy --advertise-addr 172.31.47.20   172.31.47.252:2377

 docker node ls

ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
d68ace5iraw6whp7llvgjpu48 *   ip-172-31-34-146    Ready               Active              Leader
nvp5rwavvb8lhdggo8fcf7plg     ip-172-31-35-151    Ready               Active
ouvx2l7qfcxisoyms8mtkgahw     ip-172-31-36-89     Ready               Active

docker network create -d overlay mysubnet


docker service create --name my-nginx --network my-overlay --replicas 2 --publish published=8080,target=80 nginx:latest


kubectl create deployment nginx --image=nginx

kubectl create
kubectl apply 